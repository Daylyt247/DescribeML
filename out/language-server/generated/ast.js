"use strict";
/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.reflection = exports.datasetDescriptorAstReflection = exports.isRequeriments = exports.Requeriments = exports.isGeneralInfo = exports.GeneralInfo = exports.isDatasetDefinition = exports.DatasetDefinition = exports.isSintactic = exports.Sintactic = exports.isSemantic = exports.Semantic = exports.isRequeriment = exports.Requeriment = exports.isRelationInstances = exports.RelationInstances = exports.isRangeConstraints = exports.RangeConstraints = exports.isPrivacy = exports.Privacy = exports.isMandatoryConstraints = exports.MandatoryConstraints = exports.isMaintenance = exports.Maintenance = exports.isInstance = exports.Instance = exports.isFounder = exports.Founder = exports.isDescriptionDataset = exports.DescriptionDataset = exports.isDependencies = exports.Dependencies = exports.isDeclaration = exports.Declaration = exports.isDataTypeConstraints = exports.DataTypeConstraints = exports.isConsistencyRq = exports.ConsistencyRq = exports.isCompletnessRq = exports.CompletnessRq = exports.isAuthoring = exports.Authoring = exports.isAuthor = exports.Author = exports.isAttribute = exports.Attribute = exports.isAccuracyRq = exports.AccuracyRq = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
const langium_1 = require("langium");
exports.AccuracyRq = 'AccuracyRq';
function isAccuracyRq(item) {
    return exports.reflection.isInstance(item, exports.AccuracyRq);
}
exports.isAccuracyRq = isAccuracyRq;
exports.Attribute = 'Attribute';
function isAttribute(item) {
    return exports.reflection.isInstance(item, exports.Attribute);
}
exports.isAttribute = isAttribute;
exports.Author = 'Author';
function isAuthor(item) {
    return exports.reflection.isInstance(item, exports.Author);
}
exports.isAuthor = isAuthor;
exports.Authoring = 'Authoring';
function isAuthoring(item) {
    return exports.reflection.isInstance(item, exports.Authoring);
}
exports.isAuthoring = isAuthoring;
exports.CompletnessRq = 'CompletnessRq';
function isCompletnessRq(item) {
    return exports.reflection.isInstance(item, exports.CompletnessRq);
}
exports.isCompletnessRq = isCompletnessRq;
exports.ConsistencyRq = 'ConsistencyRq';
function isConsistencyRq(item) {
    return exports.reflection.isInstance(item, exports.ConsistencyRq);
}
exports.isConsistencyRq = isConsistencyRq;
exports.DataTypeConstraints = 'DataTypeConstraints';
function isDataTypeConstraints(item) {
    return exports.reflection.isInstance(item, exports.DataTypeConstraints);
}
exports.isDataTypeConstraints = isDataTypeConstraints;
exports.Declaration = 'Declaration';
function isDeclaration(item) {
    return exports.reflection.isInstance(item, exports.Declaration);
}
exports.isDeclaration = isDeclaration;
exports.Dependencies = 'Dependencies';
function isDependencies(item) {
    return exports.reflection.isInstance(item, exports.Dependencies);
}
exports.isDependencies = isDependencies;
exports.DescriptionDataset = 'DescriptionDataset';
function isDescriptionDataset(item) {
    return exports.reflection.isInstance(item, exports.DescriptionDataset);
}
exports.isDescriptionDataset = isDescriptionDataset;
exports.Founder = 'Founder';
function isFounder(item) {
    return exports.reflection.isInstance(item, exports.Founder);
}
exports.isFounder = isFounder;
exports.Instance = 'Instance';
function isInstance(item) {
    return exports.reflection.isInstance(item, exports.Instance);
}
exports.isInstance = isInstance;
exports.Maintenance = 'Maintenance';
function isMaintenance(item) {
    return exports.reflection.isInstance(item, exports.Maintenance);
}
exports.isMaintenance = isMaintenance;
exports.MandatoryConstraints = 'MandatoryConstraints';
function isMandatoryConstraints(item) {
    return exports.reflection.isInstance(item, exports.MandatoryConstraints);
}
exports.isMandatoryConstraints = isMandatoryConstraints;
exports.Privacy = 'Privacy';
function isPrivacy(item) {
    return exports.reflection.isInstance(item, exports.Privacy);
}
exports.isPrivacy = isPrivacy;
exports.RangeConstraints = 'RangeConstraints';
function isRangeConstraints(item) {
    return exports.reflection.isInstance(item, exports.RangeConstraints);
}
exports.isRangeConstraints = isRangeConstraints;
exports.RelationInstances = 'RelationInstances';
function isRelationInstances(item) {
    return exports.reflection.isInstance(item, exports.RelationInstances);
}
exports.isRelationInstances = isRelationInstances;
exports.Requeriment = 'Requeriment';
function isRequeriment(item) {
    return exports.reflection.isInstance(item, exports.Requeriment);
}
exports.isRequeriment = isRequeriment;
exports.Semantic = 'Semantic';
function isSemantic(item) {
    return exports.reflection.isInstance(item, exports.Semantic);
}
exports.isSemantic = isSemantic;
exports.Sintactic = 'Sintactic';
function isSintactic(item) {
    return exports.reflection.isInstance(item, exports.Sintactic);
}
exports.isSintactic = isSintactic;
exports.DatasetDefinition = 'DatasetDefinition';
function isDatasetDefinition(item) {
    return exports.reflection.isInstance(item, exports.DatasetDefinition);
}
exports.isDatasetDefinition = isDatasetDefinition;
exports.GeneralInfo = 'GeneralInfo';
function isGeneralInfo(item) {
    return exports.reflection.isInstance(item, exports.GeneralInfo);
}
exports.isGeneralInfo = isGeneralInfo;
exports.Requeriments = 'Requeriments';
function isRequeriments(item) {
    return exports.reflection.isInstance(item, exports.Requeriments);
}
exports.isRequeriments = isRequeriments;
class datasetDescriptorAstReflection {
    getAllTypes() {
        return ['AccuracyRq', 'Attribute', 'Author', 'Authoring', 'CompletnessRq', 'ConsistencyRq', 'DataTypeConstraints', 'Declaration', 'Dependencies', 'DescriptionDataset', 'Founder', 'Instance', 'Maintenance', 'MandatoryConstraints', 'Privacy', 'RangeConstraints', 'RelationInstances', 'Requeriment', 'Semantic', 'Sintactic', 'DatasetDefinition', 'GeneralInfo', 'Requeriments'];
    }
    isInstance(node, type) {
        return (0, langium_1.isAstNode)(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            case exports.DatasetDefinition:
            case exports.GeneralInfo:
            case exports.Requeriments: {
                return this.isSubtype(exports.Declaration, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(referenceId) {
        switch (referenceId) {
            case 'DataTypeConstraints:att': {
                return exports.Attribute;
            }
            case 'Instance:senseAtt': {
                return exports.Attribute;
            }
            case 'MandatoryConstraints:att': {
                return exports.Attribute;
            }
            case 'RangeConstraints:att': {
                return exports.Attribute;
            }
            case 'RelationInstances:attRel': {
                return exports.Attribute;
            }
            case 'RelationInstances:attRelTarget': {
                return exports.Attribute;
            }
            case 'RelationInstances:insRel': {
                return exports.Instance;
            }
            case 'Requeriment:reporter': {
                return exports.Author;
            }
            case 'Semantic:attObject': {
                return exports.Attribute;
            }
            case 'Sintactic:attObject': {
                return exports.Attribute;
            }
            case 'Sintactic:attTarget': {
                return exports.Attribute;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}
exports.datasetDescriptorAstReflection = datasetDescriptorAstReflection;
exports.reflection = new datasetDescriptorAstReflection();
//# sourceMappingURL=ast.js.map