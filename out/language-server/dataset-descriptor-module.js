"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDatasetDescriptorServices = exports.DatasetDescriptorModule = void 0;
// import { createDefaultModule, DefaultModuleContext, inject, LangiumServices, Module, PartialLangiumServices } from 'langium';
const langium_1 = require("langium");
const module_1 = require("./generated/module");
const dataset_descriptor_validator_1 = require("./dataset-descriptor-validator");
const dataset_descriptor_index_1 = require("./dataset-descriptor-index");
/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
exports.DatasetDescriptorModule = {
    validation: {
        ValidationRegistry: (injector) => new dataset_descriptor_validator_1.DatasetDescriptorValidationRegistry(injector),
        DatasetDescriptorValidator: () => new dataset_descriptor_validator_1.DatasetDescriptorValidator()
    },
    index: {
        AstNodeDescriptionProvider: (services) => new dataset_descriptor_index_1.DatasetDescriptorDescriptionProvider(services)
    }
};
/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
function createDatasetDescriptorServices(context) {
    const shared = (0, langium_1.inject)((0, langium_1.createDefaultSharedModule)(context), module_1.datasetDescriptorGeneratedSharedModule);
    const domainmodel = (0, langium_1.inject)((0, langium_1.createDefaultModule)({ shared }), module_1.DatasetDescriptorGeneratedModule, exports.DatasetDescriptorModule);
    shared.ServiceRegistry.register(domainmodel);
    return { shared, domainmodel };
}
exports.createDatasetDescriptorServices = createDatasetDescriptorServices;
//# sourceMappingURL=dataset-descriptor-module.js.map