import {
    createDefaultModule, createDefaultSharedModule, DefaultSharedModuleContext, inject,
    LangiumServices, LangiumSharedServices, Module, PartialLangiumServices
} from 'langium';
import { DatasetDescriptorGeneratedModule, DatasetDescriptorGeneratedSharedModule } from './generated/module';
import { DatasetDescriptorValidationRegistry, DatasetDescriptorValidator } from './dataset-descriptor-validator';
import { DatasetDescriptorScopeComputation } from './dataset-descriptor-scope';
import { DatasetDescriptorNameProvider } from './dataset-descriptor-naming';
import { Generator, DocumentationGenerator } from '../generator-service/dataset-descriptor-documentation'

/**
 * Declaration of custom services - add your own service classes here.
 */
export type DatasetDescriptorAddedServices = {
    validation: {
        DatasetDescriptorValidator: DatasetDescriptorValidator
    },
    generation: {
        DocumentationGenerator: Generator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type DatasetDescriptorServices = LangiumServices & DatasetDescriptorAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const DatasetDescriptorModule: Module<DatasetDescriptorServices, PartialLangiumServices & DatasetDescriptorAddedServices> = {
    validation: {
        ValidationRegistry: (services) => new DatasetDescriptorValidationRegistry(services),
        DatasetDescriptorValidator: () => new DatasetDescriptorValidator()
    },
    references: {
        ScopeComputation: (services) => new DatasetDescriptorScopeComputation(services),
        NameProvider: () => new DatasetDescriptorNameProvider()
    },
    generation: {
        DocumentationGenerator: (services) => new DocumentationGenerator()
    },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createDatasetDescriptorServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    DatasetDescriptor: DatasetDescriptorServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        DatasetDescriptorGeneratedSharedModule
    );
    const DatasetDescriptor = inject(
        createDefaultModule({ shared }),
        DatasetDescriptorGeneratedModule,
        DatasetDescriptorModule
    );
    shared.ServiceRegistry.register(DatasetDescriptor);
    return { shared, DatasetDescriptor };
}
